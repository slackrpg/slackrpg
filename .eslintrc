{
    "env": {
        "node"  : true,
        "mocha" : true,
        "amd"   : true,
        "es6"   : true
    },
    
    "rules": {
        
        /*** ERROR CATCHING *****************************************************************************************/
        
        "comma-dangle"               : [2, "never"],    // Disallow dangling commas for multi-line objects
        "no-cond-assign"             : 2,               // Disallow assignment in conditional statements
        "no-console"                 : 2,               // Disallow console logging in node.js
        "no-constant-condition"      : 2,               // Disallow constants in loops and conditionals
        "no-control-regex"           : 2,               // Disallow control characters in regex
        "no-debugger"                : 2,               // Disallow the debugger in node.js
        "no-dupe-args"               : 2,               // Catch duplicate arguments
        "no-dupe-keys"               : 2,               // Catch duplicate keys
        "no-duplicate-case"          : 2,               // Catch duplicate case statements
        "no-empty-character-class"   : 2,               // Catch empty character classes in regex
        "no-empty"                   : 2,               // Catch empty statements
        "no-ex-assign"               : 2,               // Catch reassignment to exeception parameters
        "no-extra-boolean-cast"      : 2,               // Disallow extra boolean casts
        "no-extra-parens"            : 2,               // Keep parenthesis clean
        "no-extra-semi"              : 2,               // Disallow extra semi-colons
        "no-func-assign"             : 2,               // Disallow function assignment
        "no-invalid-regexp"          : 2,               // Catch invalid regex
        "no-irregular-whitespace"    : 2,               // Catch invalid whitespace
        "no-obj-calls"               : 2,               // Disallow calling global objects as functions
        "no-regex-spaces"            : 2,               // Catch multiple spaces in regex
        "no-sparse-arrays"           : 2,               // Disallow sparse arrays
        "no-unreachable"             : 2,               // Catch unreachable statements
        "use-isnan"                  : 2,               // Enforce use of isNaN
        "valid-jsdoc"                : [2, { "requireReturn": false }],  // Ensure JSDocs are valid
        "valid-typeof"               : 2,               // Catch invalid typeof comparisons
        
        
        /*** BEST PRACTICES *****************************************************************************************/
        
        "block-scoped-var"           : 2,               // Catch variables used outside of their defined scope
        "complexity"                 : [2, 6],          // Limit the cyclomatic complexity of the program
        "consistent-return"          : 2,               // Enforce consistent return values
        "curly"                      : [2, "all"],      // Enforce curly brackets
        "default-case"               : 2,               // Enforce explicit defaults for switch statements
        "dot-notation"               : 2,               // Enforce dot-notation whenever possible
        "dot-location"               : [2, "property"], // Enforce dot-notation to be attached to properties
        "eqeqeq"                     : 2,               // Enforce type-safety operators
        "no-alert"                   : 2,               // Disallow alert, confirm, and prompt calls
        "no-caller"                  : 2,               // Disallow deprecated caller and callee properties
        "no-div-regex"               : 2,               // Disallow ambiguous division in regex
        "no-else-return"             : 2,               // Enforce good practices when returning from an if statement
        "no-eq-null"                 : 2,               // Enforce type-safety null checks
        "no-eval"                    : 2,               // Disallow the eval keyword
        "no-extend-native"           : 2,               // Disallow extending native types
        "no-extra-bind"              : 2,               // Disallow unnecessary function binding
        "no-fallthrough"             : 2,               // Catch fallthrough in case statements
        "no-floating-decimal"        : 2,               // Disallow floating decimals in floats
        "no-implicit-coercion"       : 2,               // Disallow implicit type coercions
        "no-implied-eval"            : 2,               // Disallow eval-like methods
        "no-invalid-this"            : 2,               // Catch invalid "this" calls
        "no-iterator"                : 2,               // Disallow the __iterator__ property
        "no-labels"                  : 2,               // Disallow labeled statements
        "no-lone-blocks"             : 2,               // Disallow unnecesary nested blocks
        "no-multi-spaces"            : 2,               // Disallow odd spacing
        "no-multi-str"               : 2,               // Disallow hard-to-read multi-ling strings
        "no-native-reassign"         : 2,               // Disallow reassignment of native objects
        "no-new-func"                : 2,               // Disallow the new operator for Function objects
        "no-new-wrappers"            : 2,               // Disallow the new keyword for wrappers
        "no-new"                     : 2,               // Disallow dumb uses of new in general
        "no-octal-escape"            : 2,               // Disallow the use of octal escape sequences in literals
        "no-octal"                   : 2,               // Disallow octal notation completely
        "no-param-reassign"          : 2,               // Disallow reassignment of function parameters
        "no-process-env"             : 2,               // Disallow process.env throughout the application
        "no-proto"                   : 2,               // Disallow the __proto__ property
        "no-redeclare"               : 2,               // Disallow declaring the same variable twice
        "no-return-assign"           : 2,               // Disallow assignment in the return statement
        "no-script-url"              : 2,               // Disallow javascript: in urls
        "no-self-compare"            : 2,               // Disallow comparisons of the same item
        "no-sequences"               : 2,               // Disallow the comma operator
        "no-throw-literal"           : 2,               // Enforce use of exceptions
        "no-unused-expressions"      : 2,               // Disallow calculation of unused expressions
        "no-useless-call"            : 2,               // Disallow unnecessary .call() and .apply() calls
        "no-void"                    : 2,               // Disallow the void operator
        "no-with"                    : 2,               // Disallow the with statement
        "vars-on-top"                : 2,               // Enforce all variables to be declared up top
        "wrap-iife"                  : [2, "any"],      // Enforce IIFEs to be wrapped in parenthesis
        
        
        /*** STRICT MODE ********************************************************************************************/
        
        "strict"                     : 0,               // Disable Use Strict directive requirements
        
        
        /*** VARIABLE DECLARATIONS **********************************************************************************/
        
        "no-delete-var"              : 2,               // Disallow deletion on variables
        "no-shadow-restricted-names" : 2,               // Disallow overriding properties of the global object
        "no-shadow"                  : 2,               // Disallow redeclaring variables in an outer scope
        "no-undef-init"              : 2,               // Disallow unnecessary undefined definitions
        "no-undef"                   : 2,               // Disallow undeclared variables
        "no-undefined"               : 2,               // Disallow the undefined variable
        "no-unused-vars"             : [2, {"args": "none"}], // Disallow unused variable declaration
        "no-use-before-define"       : 2,               // Disallow using variables before they are defined
        
        
        /*** NODE.JS SPECIFIC ***************************************************************************************/
        
        "callback-return"            : 2,               // Enforce callback returns for event-driven programming
        "handle-callback-err"        : 2,               // Enforce callback error handling
        "no-path-concat"             : 2,               // Disallow concatentation with __dirname and __filename
        "no-process-exit"            : 2,               // Disallow process.exit() and encourage proper throws
        "no-sync"                    : 2,               // Disallow synchronous versions of methods
        
        
        /*** STYLISTIC ISSUES ***************************************************************************************/
        
        // Prevent spacing inside of arrays
        "array-bracket-spacing": [2, "never"],
        
        // Enforce trailing brackets
        "brace-style": [2, "1tbs"],
        
        // Enforce camelcase everywhere
        "camelcase": [2, {"properties": "always"}],
        
        // Enforce appropriate comma spacing
        "comma-spacing": [2, {"before": false, "after": true}],
        
        // Make sure commas always trail
        "comma-style": [2, "last"],
        
        // Disallow spacing inside of properties
        "computed-property-spacing": [2, "never"],
        
        // Always use "self" to refer to this
        "consistent-this": [2, "self"],
        
        // Enforce a single EOL at the end of each file
        "eol-last": 2,
        
        // Enforce declarative functional expressions
        "func-style": [2, "declaration"],
        
        // Enforce 4-space indention
        "indent": [2, 4],
        
        // Enforce aligning key value pairs
        "key-spacing": [2, {"align": "colon", "beforeColon": true, "afterColon": true}],
        
        // Enforce clean commenting spacing
        "lines-around-comment": [2, {
            "beforeBlockComment" : true,
            "afterBlockComment"  : false,
            "beforeLineComment"  : true,
            "afterLineComment"   : false,
            "allowBlockStart"    : true,
            "allowBlockEnd"      : true
        }],
        
        // Enforce consistent linebreaks to unix style
        "linebreak-style": [2, "unix"],
        
        // Disallow too many nested callbacks
        "max-nested-callbacks": [2, 3],
        
        // Enforce capital letters to start all new constructors
        "new-cap": 2,
        
        // Enforce parenthesis on all new calls
        "new-parens": 2,
        
        // Require newlines after variable declarations
        "newline-after-var": 2,
        
        // Enforce the Array literal notation
        "no-array-constructor": 2,
        
        // Enforce the use of else if
        "no-lonely-if": 2,
        
        // Disallow space and tab mixing (unless for alignment purposes)
        "no-mixed-spaces-and-tabs": [2, "smart-tabs"],
        
        // Prevent more than two empty lines
        "no-multiple-empty-lines": [2, {"max": 2}],
        
        // Disallow nested ternary statements
        "no-nested-ternary": 2,
        
        // Enforce object literals
        "no-new-object": 2,
        
        // Disallow spaces between function calls
        "no-spaced-func": 2,
        
        // Disallow spaces at the end of lines
        "no-trailing-spaces": [2, {"skipBlankLines": true}],
        
        // Disallow dumb ternary calls
        "no-unneeded-ternary": 2,
        
        // Disallow spacing inside object declarations
        "object-curly-spacing": [2, "never"],
        
        // Require a single variable declaration for cleanliness
        "one-var": [2, "always"],
        
        // Enforce shorthand operators
        "operator-assignment": [2, "always"],
        
        // Enforce operator linebreaks to happen after operators
        "operator-linebreak": [2, "after"],
        
        // Ensure property declarations are consistent when needed with quoting
        "quote-props": [2, "consistent-as-needed"],
        
        // Enforce single quotes
        "quotes" : [2, "single"],
        
        // Enforce spacing after semicolons
        "semi-spacing": [2, {"before": false, "after": true}],
        
        // Enforce semicolon usage
        "semi": [2, "always"],
        
        // Enforce spacing after keywords
        "space-after-keywords": [2, "always"],
        
        // Enforce spacing before blocks
        "space-before-blocks": [2, "always"],
        
        // Disallow spaces after a function declaration
        "space-before-function-paren": [2, "never"],
        
        // Disallow spaces in parenthesis
        "space-in-parens": [2, "never"],
        
        // Enforce space around operators
        "space-infix-ops": 2,
        
        // Enforce space after return, throw, and case
        "space-return-throw-case": 2,
        
        // Disallow spaces in unary operations
        "space-unary-ops": [2, {"words": true, "nonwords": false}],
        
        
        /*** ECMASCRIPT 6 SPECIFIC **********************************************************************************/
        
        "arrow-spacing"              : 2,               // Require spaces before and after arrow spacing
        "constructor-super"          : 2,               // Ensure that constructors of derived classes call super()
        "generator-star-spacing"     : 2,               // Enforce spacing before, but not after, generator stars
        "no-class-assign"            : 2,               // Disallow modifying variables of class declarations
        "no-const-assign"            : 2,               // Disallow modifying variables that are declared with const
        "no-this-before-super"       : 2,               // Prevent use of this/super before super()
        "object-shorthand"           : [2, "always"],   // Enforce newer object shorthand declarations
        "prefer-const"               : 2,               // Prefer using const for variables that are never changed
        "prefer-spread"              : 2,               // Prefer spread operator (...) over .apply()
        "require-yield"              : 2,               // Enforce all generators to yield
        
    }
}